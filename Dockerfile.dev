# https://github.com/monicahq/docker/blob/main/5/fpm-alpine/Dockerfile
FROM php:8.2-fpm-alpine

#https://hub.docker.com/_/php > Configuration section
RUN mv "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini"

RUN set -ex; \
    \
    apk add --no-cache --virtual .build-deps \
        $PHPIZE_DEPS \
        linux-headers \
        icu-dev \
        zlib-dev \
        libzip-dev \
        libxml2-dev \
        freetype-dev \
        libpng-dev \
        libjpeg-turbo-dev \
        jpeg-dev \
        gmp-dev \
        libwebp-dev \
        # libintl \
        # imagemagick-dev \
    ;\
    export CFLAGS="$PHP_CFLAGS" CPPFLAGS="$PHP_CPPFLAGS" LDFLAGS="$PHP_LDFLAGS"; \
    docker-php-ext-configure intl; \
    docker-php-ext-configure gmp; \
    # https://github.com/docker-library/php/issues/931#issuecomment-568658449
    # docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp; \
    \
    docker-php-ext-install -j "$(nproc)" \
        intl \
        zip \
        bcmath \
        # gd \
        gmp \
        pcntl \
        exif \
        pdo_mysql \
    ;\
    apk add --no-cache curl \
       supervisor \
       # imagemagick \
       nginx \
    ;\
    # pecl will claim success even if one install fails, so we need to perform each install separately
    pecl update-channels; \
    pecl install redis; \
    # pecl install imagick; \
    pecl install xdebug; \
    \
    docker-php-ext-enable \
        redis \
        # imagick \
        xdebug \
    ;\
    runDeps="$( \
        scanelf --needed --nobanner --format '%n#p' --recursive /usr/local \
            | tr ',' '\n' \
            | sort -u \
            | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
    )"; \
    apk add --no-network --virtual .run-deps $runDeps; \
    apk del --no-network .build-deps; \
    rm -rf /tmp/*; rm -rf /var/cache/apk/*; rm -rf /tmp/pear ~/.pearrc ;\
    ln -sf /dev/stdout /var/log/nginx/access.log ;\
    ln -sf /dev/stderr /var/log/nginx/error.log

# Set working directory
WORKDIR /var/www/blog

ADD docker/entrypoint.sh /usr/local/bin

RUN chown -R www-data:www-data /var/www/blog

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

RUN composer install --no-interaction --no-suggest --no-progress --no-dev --ignore-platform-reqs; \
    composer clear-cache

# Supervisor process configuration
COPY ./docker/supervisor/supervisord.dev.conf /etc/supervisord.conf
COPY ./docker/supervisor/supervisor.d /etc/supervisor.d

# PHP configuration
COPY ./docker/php/z-php.ini /usr/local/etc/php/conf.d/z-php.ini
COPY ./docker/php/z-php-fpm.conf /usr/local/etc/php-fpm.d/z-php-fpm.conf

# Base nginx configuration
COPY ./docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY ./docker/nginx/default.conf /etc/nginx/http.d/default.conf

# Xdebug configuration
COPY ./docker/xdebug/docker-xdebug.ini /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini

ENTRYPOINT ["entrypoint.sh"]
EXPOSE 80

CMD ["supervisord", "-n", "-c", "/etc/supervisord.conf"]
